import React, {
    createContext,
    useContext,
    useState,
    useEffect,
    useRef,
    ReactNode,
  } from "react";
  import * as Notifications from "expo-notifications";
  import { Subscription } from "expo-modules-core";
  import { registerForPushNotificationsAsync } from "@/utils/registerForPushNotificationsAsync";
  import { UserContext } from "../hooks/UserContext";
  
  interface NotificationContextType {
    expoPushToken: string | null;
    notification: Notifications.Notification | null;
    error: Error | null;
  }
  
  const NotificationContext = createContext<NotificationContextType | undefined>(
    undefined
  );
  
  export const useNotification = () => {
    const context = useContext(NotificationContext);
    if (context === undefined) {
      throw new Error(
        "useNotification must be used within a NotificationProvider"
      );
    }
    return context;
  };
  
  interface NotificationProviderProps {
    children: ReactNode;
  }
  
  export const NotificationProvider: React.FC<NotificationProviderProps> = ({
    children,
  }) => {
    const [expoPushToken, setExpoPushToken] = useState<string | null>(null);
    const [notification, setNotification] =
      useState<Notifications.Notification | null>(null);
    const [error, setError] = useState<Error | null>(null);
  
    const notificationListener = useRef<Subscription>();
    const responseListener = useRef<Subscription>();

    useEffect(() => {
        registerForPushNotificationsAsync("defaultUserId") // à¹ƒà¸ªà¹ˆ ID à¸Šà¸±à¹ˆà¸§à¸„à¸£à¸²à¸§à¸«à¸£à¸·à¸­à¹‚à¸„à¸£à¸‡à¸ªà¸£à¹‰à¸²à¸‡à¸‚à¸­à¸‡à¸„à¸¸à¸“
          .then((token) => setExpoPushToken(token))
          .catch((err) => setError(err));
      }, []);

    const { userProfile } = useContext(UserContext) || {};
  //  console.log("userProfile Noti:", userProfile);
    useEffect(() => {
       // console.log("userProfile:", userProfile);
      
        if (!userProfile) {
          console.warn("User profile not loaded yet.");
          return;
        }
        if (!userProfile.id) {
          console.warn("User profile does not have an ID.");
          return;
        }
      
        // à¸¥à¸‡à¸—à¸°à¹€à¸šà¸µà¸¢à¸™ Push Notifications
        registerForPushNotificationsAsync(userProfile.id)
          .then((token) => setExpoPushToken(token))
          .catch((error) => setError(error));
      
        // à¹€à¸žà¸´à¹ˆà¸¡ Listener à¸ªà¸³à¸«à¸£à¸±à¸š Notifications
        notificationListener.current =
          Notifications.addNotificationReceivedListener((notification) => {
            console.log("ðŸ”” Notification Received: ", notification);
            setNotification(notification);
          });
      
        responseListener.current =
          Notifications.addNotificationResponseReceivedListener((response) => {
            console.log("ðŸ”” Notification Response: ", response);
          });
      
        // à¸—à¸³à¸„à¸§à¸²à¸¡à¸ªà¸°à¸­à¸²à¸” Event Listeners
        return () => {
          if (notificationListener.current) {
            Notifications.removeNotificationSubscription(notificationListener.current);
          }
          if (responseListener.current) {
            Notifications.removeNotificationSubscription(responseListener.current);
          }
        };
      }, [userProfile]); // à¹ƒà¸Šà¹‰ userProfile à¹€à¸›à¹‡à¸™ Dependency
      
  
    return (
      <NotificationContext.Provider
        value={{ expoPushToken, notification, error }}
      >
        {children}
      </NotificationContext.Provider>
    );
  };